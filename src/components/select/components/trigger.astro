---
import Button from '@/components/button.astro';
import Icon from '@/components/icon.astro';
import type { ComponentProps } from 'astro/types';
import { twMerge } from 'tailwind-merge';

type Props = ComponentProps<typeof Button>;

const { class: className, ...props } = Astro.props;
---

<Button
  {...props}
  role="combobox"
  aria-haspopup="listbox"
  tabindex="0"
  x-ref="trigger"
  :id="id + '-trigger'"
  :aria-expanded="open"
  :aria-controls="id + '-options'"
  :aria-activedescendant="open ? focused : ''"
  @click="open = !open"
  @keydown={`
    const { key, altKey: alt, ctrlKey: ctrl, metaKey: meta } = $event;
    const prevent = () => ($event.preventDefault(), $event.stopPropagation());
    switch (key) {
      case 'Tab': return open && (open = false);
      case 'Escape': return prevent(), (open && (open = false));
      case 'ArrowUp': return prevent(), (open ? (alt ? (open = false) : getPrev() && (focused = getPrev())) : (open = true));
      case 'ArrowDown': return prevent(), (open ? (getNext() && (focused = getNext())) : (open = true));
      case 'PageUp': return prevent(), (open && (focused = getFirst()));
      case 'PageDown': return prevent(), (open && (focused = getLast()));
      case 'Home': return prevent(), ((!open && (open = true), focused = getFirst()));
      case 'End': return prevent(), ((!open && (open = true), focused = getLast()));
      case 'Enter': return prevent(), (open ? (value = focused, open = false) : (open = true));
      case ' ': return prevent(), (open ? (value = focused, open = false) : (open = true));
      default: {
        if ((key.length > 1 && !['Backspace', 'Clear'].includes(key)) || alt || ctrl || meta) return;
        prevent();
        setQuery(key);
        const nextFocused = getAll().find((option) => option.dataset.value.toLowerCase().includes(query.toLowerCase()));
        return nextFocused && (focused = nextFocused.dataset.value);
      }
    }
  `}
  class={twMerge('ring-gray-8 relative z-50 justify-between focus:ring aria-expanded:ring', className)}
>
  <div x-text="value" class="overflow-hidden text-ellipsis"></div>
  <Icon name="chevron-down" :class="open && 'rotate-180'" class="motion-safe:transition-transform" />
</Button>
