---
import type { HTMLAttributes } from 'astro/types';
import { twMerge } from 'tailwind-merge';

type Props = HTMLAttributes<'input'> & { icon?: string };

const { class: className, icon, ...props } = Astro.props;
---

<div
  :class="!!beforeSrc && '**:hidden'"
  class={twMerge(
    'relative flex size-full flex-col items-center justify-center gap-1 bg-fixed',
    'bg-[repeating-linear-gradient(-35deg,--alpha(var(--color-gray-2)/80%),--alpha(var(--color-gray-2)/80%)_3px,transparent_3px,transparent_7px)]',
    className,
  )}
>
  <slot />
  <input
    {...props}
    x-cloak
    x-show="!beforeSrc"
    type="file"
    class="absolute inset-0 z-50 cursor-pointer opacity-0"
    @change={`
      const file = $event.target.files?.[0];
      if (!file) return;

      reader.readAsDataURL(file);
      reader.onload = (event) => {
        beforeSrc = event.target.result
        $refs.previewBefore.onload = () => {
          const name = file.name;
          const type = file.type;
          const lastModified = new Date(file.lastModified).toLocaleString();
          const size = file.size > 1024 * 1024 ? (file.size / (1024 * 1024)).toFixed(2) + ' MB' : (file.size / 1024).toFixed(2) + ' KB';
          const dimensions = $refs.previewBefore.width + 'x' + $refs.previewBefore.height;
          $dispatch('upload', { name, type, lastModified, size, dimensions });
        }
      };
    `}
  />
</div>
